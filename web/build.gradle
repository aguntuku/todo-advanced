project(':web') {
    apply plugin: 'war'
    apply plugin: 'jetty'
	apply from: "$rootDir/gradle/publishMaven.gradle"
	apply from: "$rootDir/gradle/deployCargo.gradle"
	apply from: "$rootDir/gradle/functionalTest.gradle"

    dependencies {
	    compile project(':repository')
	    providedCompile 'javax.servlet:servlet-api:2.5'
	    runtime 'javax.servlet:jstl:1.1.2'
		runtime 'taglibs:standard:1.1.2'
    }

	task createBuildInfoFile << {
		def buildInfoFile = new File("$buildDir/build-info.properties")
		Properties props = new Properties()
		props.setProperty('version', project.version.toString())
		props.setProperty('timestamp', buildTimestamp)
		props.store(buildInfoFile.newWriter(), null)
	}
	
	war {
		dependsOn createBuildInfoFile
	   	baseName = 'todo'
	
		from(buildDir) {
			include 'build-info.properties'
		    into('WEB-INF/classes')
		}
	}
	
	ext.downloadedArtifact = file("$buildDir/download/$war.archiveName") 
	
	task downloadBinaryArchive(type: com.manning.gia.BinaryDownload) {
		ext {
			repoPath = project.group.replaceAll('\\.', '/')
			repoBaseArtifactName = war.baseName
			repoVersion = project.version.toString()
			repoArtifact = war.archiveName
			binaryUrl = "$artifactoryContextUrl/simple/$artifactoryRepository/$repoPath/$repoBaseArtifactName/$repoVersion/$repoArtifact"
		}

		sourceUrl = binaryUrl
		targetBinary = downloadedArtifact
	}
	
	configurations {
		tomcatAnt
	}
	
	dependencies {
		tomcatAnt 'org.apache.tomcat:tomcat-catalina-ant:7.0.39'
	}
	
	ext.appContextStatus = {
		ant.taskdef(name: 'list', classname: 'org.apache.catalina.ant.ListTask', classpath: configurations.tomcatAnt.asPath)
		ant.list(url: "http://${config.envs.test.server.hostname}:${config.envs.test.server.port}/manager/text", 
				 username: config.envs.test.server.username, 
				 password: config.envs.test.server.password, 
				 outputproperty: 'appContextStatus')
		String appContextStatus = ant.properties.appContextStatus
		appContextStatus.indexOf("/${config.envs.test.server.context}:running") != -1 || appContextStatus.indexOf("/${config.envs.test.server.context}:stopped") != -1
	}
	
	cargoUndeployRemote {
		onlyIf appContextStatus
	}
	
	cargoDeployRemote.dependsOn downloadBinaryArchive, cargoUndeployRemote
	
	cargo {
	    containerId = 'tomcat7x'
		port = config.envs.test.server.port

	    deployable {
		    file = downloadedArtifact
	        context = config.envs.test.server.context
	    }

	    remote {
	        hostname = config.envs.test.server.hostname
	        username = config.envs.test.server.username
	        password = config.envs.test.server.password
	    }
	}
}